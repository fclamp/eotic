/*
 * @module eotic
 * @author gnosaij
 * 相对underscore.template的优点
 *   (1) 没有使用with，屏蔽公认的性能问题
 *   (2) 对源模板字符串只执行了一次全局正则匹配，underscore.template是三次
 *   (3) 没有任何依赖(包括预编译后的脚本)，underscore.template依赖underscore
 *   (4) 完善的报错信息，方便快速定位错误
 *   (5) TODO：支持'管道'filter
 * 相对underscore.template的缺点
 *   (1) 出于上面第一条的性能考虑，需要在表达式中多写'this.'，如：
 *       underscore：<%=name%>
 *       eotic：<%=this.name%>
 * 参考
 *   (1) http://ejohn.org/blog/javascript-micro-templating/
 *   (2) http://krasimirtsonev.com/blog/article/Javascript-template-engine-in-just-20-line
 */
(function(glob) {

    var re = /<%(.+?)%>/g,
        thisDotExp = /\bthis\./g,
        thisDot = 't__.',
        escapeExp = /[&<>"']/g,
        escapeMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#x27;'
        };

    var eotic = {
        template: tt,
        escape: ee
    };

    // replacer callback for ee
    function rr(match) {
        return escapeMap[match];
    }

    // escape html chars
    // NOTE: 'escape' is reserved word in javascript
    function ee(string) {
        return string == null ? '' : ''+string.replace(escapeExp, rr);
    }

    // create template function
    function tt(html) {

        var code = 'var r__=[];\n',
            cursor = 0;

        // @param {string} str  the string to be processed
        // @param {boolean} js  if the 'str' is a js expression
        var add = function(str, js) {
            if (js) {
                // turn 'this.'(point to data) to 't__.' globally
                str = str.replace(thisDotExp, thisDot);

                var firstChar = str[0];
                // output 'this.xxx'
                if (firstChar === '=') {
                    code +='r__.push(' + str.substr(1) + ');\n';
                }
                // output escaped 'this.xxx'
                else if (firstChar === '-') {
                    code +='r__.push(e__(' + str.substr(1) + '));\n';
                }
                // output js expression
                else {
                    code += str + '\n';
                }
            } else {
                code += str != '' ? 'r__.push("' + str.replace(/"/g, '\\"') + '");\n' : '';
            }
                
            return add;
        }

        while(match = re.exec(html)) {
            console.log(match);
            add(html.slice(cursor, match.index))(match[1], true);
            cursor = match.index + match[0].length;
        }

        add(html.substr(cursor, html.length - cursor));

        code = (code + 'return r__.join("");').replace(/[\r\t\n]/g, '');

        var render = function (data) {
            var result;
            try { 
                result = new Function('var t__=this, e__=eotic.escape;' + code).apply(data);
            } catch(err) { 
                console.error(err.message + " from data and tpl below:");
                console.log(data);
                console.log(html);
            }
            return result;            
        };

        // for precompile by nodejs
        // NOTE: reserved variables contains:
        //    'r__' array that holds the string fragments
        //    't__' point to data
        //    'e__' html-escape function, added within compile scripts
        // 
        // precompiled file will be made of:
        // 
        // header.js + body(created by nodejs) + footer.js
        // 
        //        ┌ (function (glob) {
        // header ┤     var tpl = {};
        //        └     var e__ = function () {};  // prefilled!!!
        //              
        //        ┌     tpl.menu = function (data) {
        //        │         var t__ = data;
        // body   ┤         var r__ = [];
        //        │     }
        //        └     // more tpl.xxx
        //  
        //        ┌     // AMD/CMD/browser support
        // footer ┤     ...
        //        └ })(this);
        render.source = 'function (data) {\nvar t__=data;\n' + code + '\n}';

        return render;
    }

    (typeof module != 'undefined' && module.exports) ?
        (module.exports = eotic) :
        (typeof define === 'function' && define.amd) ?
            define('eotic', [], function() { return eotic; }) :
            (glob.eotic = eotic);
})(this);